import { fetchStrapi } from '$lib/api';

export const load = async ({ params }) => {
  console.log('üöÄ Load function called for projet detail (server)');
  console.log('üîß Environment check - VITE_API_URL:', import.meta.env.VITE_API_URL);
  console.log('üîß Params:', params);
  console.log('üîß Slug recherch√©:', params.slug);
  
  // Log imm√©diat pour v√©rifier que la fonction est appel√©e
  console.log('üîç D√©but de la recherche du projet...');
  
  try {
    console.log('üîç Tentative de r√©cup√©ration de tous les projets...');
    
    // D'abord, r√©cup√©rer tous les projets pour voir la structure
    const allProjectsRes = await fetchStrapi('/projets?populate[medias][populate]=*&populate[tags][populate]=*');
    console.log('üì• Tous les projets:', allProjectsRes.data);
    console.log('üì• Nombre de projets:', allProjectsRes.data?.length || 0);
    
    if (!allProjectsRes.data || allProjectsRes.data.length === 0) {
      console.log('‚ùå Aucun projet trouv√© dans l\'API');
      return { project: null };
    }
    
    // Afficher le premier projet pour voir la structure
    console.log('üì• Premier projet structure:', allProjectsRes.data[0]);
    
    // Chercher le projet par slug (priorit√©)
    const projectBySlug = allProjectsRes.data.find(p => p.slug === params.slug);
    console.log('üì• Projet trouv√© par slug:', projectBySlug);
    
    if (projectBySlug) {
      const result = { project: projectBySlug };
      console.log('‚úÖ Load function - returning by slug:', result);
      return result;
    }
    
    // Fallback par documentId
    console.log('üîç Slug non trouv√©, recherche par documentId...');
    const project = allProjectsRes.data.find(p => p.documentId === params.slug);
    console.log('üì• Projet trouv√© par documentId:', project);
    
    if (project) {
      const result = { project: project };
      console.log('‚úÖ Load function - returning by documentId:', result);
      return result;
    }
    
    // Fallback par ID
    console.log('üîç DocumentId non trouv√©, recherche par ID...');
    const projectById = allProjectsRes.data.find(p => p.id.toString() === params.slug);
    console.log('üì• Projet trouv√© par ID:', projectById);
    
    if (projectById) {
      const result = { project: projectById };
      console.log('‚úÖ Load function - returning by ID:', result);
      return result;
    }
    
    // Si aucun projet trouv√©
    console.log('‚ùå Aucun projet trouv√© avec slug, documentId ou ID:', params.slug);
    console.log('üîç DocumentIds disponibles:', allProjectsRes.data.map(p => p.documentId));
    console.log('üîç Slugs disponibles:', allProjectsRes.data.map(p => p.slug));
    console.log('üîç IDs disponibles:', allProjectsRes.data.map(p => p.id));
    return { project: null };
    
  } catch (error) {
    console.error('‚ùå Error loading projet detail:', error);
    return {
      project: null
    };
  }
}; 